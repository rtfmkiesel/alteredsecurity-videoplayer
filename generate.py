import os
import re
import glob
import argparse
from jinja2 import Template

player_template_raw = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Loading...</title>
    <style>
        body {
            font-family: monospace;
            color: #282727;
            background-color: #fdfdfd;
            margin: 1rem;
        }

        video {
            width: 100%;
        }

        button {
            font-family: monospace;
            padding: 5px 10px;
            font-size: 12px;
            cursor: pointer;
        }

        #app-container {
            width: 100%;
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }

        #video-container {
            width: 70%;
            margin-right: 10px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            flex-wrap: nowrap;
        }

        #video-title {
            font-size: larger;
        }

        #video-controls {
            display: flex;
            justify-content: flex-start;
            flex-direction: row;
            flex-wrap: nowrap;
            align-items: center;
            gap: 10px;
        }

        #toc-container {
            max-width: 25%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .toc-entry {
            text-decoration: underline;
            width: max-content;
        }

        .toc-entry:hover {
            cursor: pointer;
            color: red;
        }

        .toc-entry-selected {
            text-decoration-thickness: 3px;
            text-decoration-color: red;
        }

        @media only screen and (orientation: portrait) {
            #video-container {
                width: 100%;
            }

            #toc-container {
                max-width: unset;
                margin-top: 25px;
            }
        }
    </style>
</head>
<body>
    <h1 id="video-title">Loading...</h1>
    <div id="app-container">
        <div id="video-container">
            <video id="video-player" controls>
                <source type="video/mp4" />
                Your browser does not support the video tag.
            </video>
        </div>
        <div id="toc-container">
            <div id="video-controls">
                <button id="button-prev">&#9668;&#9668;</button>
                <button id="button-backward">&#9668;10s</button>
                <button id="button-play">Play</button>
                <button id="button-speed">Loading...</button>
                <button id="button-lightdark">Loading...</button>
                <button id="button-forward">10s&#9658;</button>
                <button id="button-next">&#9658;&#9658;</button>
            </div>
            <h2>Videos</h2>
            <div id="toc"></div>
        </div>
    </div>

    <script>
        let currentVideoIndex = 0; // To keep track of which video we are at
        const courseTitle = "{{ course_title }}";
        const videos = [ // Generated by the Python script 
        {% for video in videos %}{
                id: {{ video.id }},
                title: "{{ video.title }}",
                filepath: "{{ video.filepath }}"
            }{% if not loop.last %},{% endif %}{% endfor %}
        ];

        var isLightMode = true; // Default = light mode
        const lightMode = { text: "Dark", foreground: "#282727", background: "#fdfdfd" };
        const darkMode = { text: "Light", foreground: "#fefefe", background: "#0c0d10" };

        function loadNextVideo(player) {
            if (currentVideoIndex < videos.length - 1) {
                currentVideoIndex++;
                loadVideo(player, currentVideoIndex, 0, player.playbackRate, player.volume);
            }
        }

        function loadPreviousVideo(player) {
            if (currentVideoIndex > 0) {
                currentVideoIndex--;
                loadVideo(player, currentVideoIndex, 0, player.playbackRate, player.volume);
            }
        }

        // Loads a video and sets the appropriate settings. 
        function loadVideo(player, index, timestamp, speed, volume) {
            currentVideoIndex = index;
            localStorage.setItem("videoIndex", index); // Update the storage to keep track
            
            var video = videos[index];
            player.src = video.filepath; // Load the video from disk
            
            var title = `${courseTitle} ${video.id}/${videos.length} - ${video.title}`;
            document.getElementById("video-title").innerText = title;
            document.title = title;

            // Update ToC by first clearing all and then applying the class to the current one
            document.querySelectorAll('.toc-entry').forEach(entry => entry.classList.remove("toc-entry-selected"));
            document.getElementById(`toc-${video.title}`).classList.add("toc-entry-selected");

            // Set the video player settings
            player.currentTime = timestamp;
            localStorage.setItem("videoTimestamp", 0);
            player.volume = volume;
            setSpeed(player, speed);
        }

        function setSpeed(player, fixedRate) {
            const speeds = [
                { rate: 1, text: "Speed: 1x" },
                { rate: 1.25, text: "Speed: 1.25x" },
                { rate: 1.5, text: "Speed: 1.5x" },
                { rate: 1.75, text: "Speed: 1.75x" },
                { rate: 2, text: "Speed: 2x" },
                { rate: 0.5, text: "Speed: 0.5x" },
                { rate: 0.75, text: "Speed: 0.75x" },
            ];

            let currentSpeedIndex = speeds.findIndex(speed => speed.rate === player.playbackRate);
            let rate = fixedRate > 0 ? fixedRate : speeds[(currentSpeedIndex + 1) % speeds.length].rate;

            player.playbackRate = rate;
            document.getElementById("button-speed").textContent = speeds.find(speed => speed.rate === rate).text;

            localStorage.setItem("videoSpeed", rate);
        }

        // Will be the entrypoint, loads all settings from disk and applies them
        function loadSettingsFromStorage(player, lightdarkBtn) {
            currentVideoIndex = parseInt(localStorage.getItem("videoIndex") || 0);
            var videoTimestamp = parseFloat(localStorage.getItem("videoTimestamp") || 0);
            var videoSpeed = parseFloat(localStorage.getItem("videoSpeed") || 1);
            var videoVolume = parseFloat(localStorage.getItem("videoVolume") || 1);
            isLightMode = localStorage.getItem("isLightMode") === 'true';

            if (isLightMode) setLightMode(lightdarkBtn);
            else setDarkMode(lightdarkBtn);

            loadVideo(player, currentVideoIndex, videoTimestamp, videoSpeed, videoVolume);
        }

        function setLightMode(lightdarkBtn) {
            document.body.style.color = lightMode.foreground;
            document.body.style.backgroundColor = lightMode.background;
            lightdarkBtn.textContent = lightMode.text;
            isLightMode = true;
            localStorage.setItem("isLightMode", true);
        }

        function setDarkMode(lightdarkBtn) {
            document.body.style.color = darkMode.foreground;
            document.body.style.backgroundColor = darkMode.background;
            lightdarkBtn.textContent = darkMode.text;
            isLightMode = false;
            localStorage.setItem("isLightMode", false);
        }

        // When the site had loaded, add all listeners
        window.addEventListener("load", function () {
            const videoPlayer = document.getElementById("video-player");
            const prevBtn = document.getElementById("button-prev");
            const backwardBtn = document.getElementById("button-backward");
            const playPauseBtn = document.getElementById("button-play");
            const speedBtn = document.getElementById("button-speed");
            const lightdarkBtn = document.getElementById("button-lightdark");
            const forwardBtn = document.getElementById("button-forward");
            const nextBtn = document.getElementById("button-next");
            const toc = document.getElementById("toc");

            prevBtn.addEventListener("click", () => loadPreviousVideo(videoPlayer));
            backwardBtn.addEventListener("click", () => 
                videoPlayer.currentTime = videoPlayer.currentTime-10
            );
           
            playPauseBtn.addEventListener("click", () => {
                if (videoPlayer.paused) {
                    videoPlayer.play();
                    playPauseBtn.textContent = "Pause";
                } else {
                    videoPlayer.pause();
                    playPauseBtn.textContent = "Play";
                }
            });

            speedBtn.addEventListener("click", () => setSpeed(videoPlayer, 0));

            lightdarkBtn.addEventListener("click", () => {
                if (isLightMode) setDarkMode(lightdarkBtn);
                else setLightMode(lightdarkBtn);
            });

            forwardBtn.addEventListener("click", () => 
                videoPlayer.currentTime = videoPlayer.currentTime+10
            );
            nextBtn.addEventListener("click", () => loadNextVideo(videoPlayer));

            videoPlayer.addEventListener("ended", () => loadNextVideo(videoPlayer));
            videoPlayer.addEventListener("timeupdate", () => localStorage.setItem("videoTimestamp", videoPlayer.currentTime));
            videoPlayer.addEventListener("volumechange", () => localStorage.setItem("videoVolume", videoPlayer.volume));

            // Generate the ToC
            videos.forEach((video, i) => {
                let entry = document.createElement("p");
                entry.id = `toc-${video.title}`;
                entry.className = "toc-entry";
                entry.textContent = `${video.id} - ${video.title}`;
                entry.addEventListener("click", () => loadVideo(videoPlayer, i, 0, videoPlayer.playbackRate, videoPlayer.volume));
                toc.appendChild(entry);
            });

            loadSettingsFromStorage(videoPlayer, lightdarkBtn);
        });
    </script>
</body>
</html>
"""


parser = argparse.ArgumentParser()
parser.add_argument("-t", "--title", help="Course Title", required=True)
parser.add_argument(
    "-d", "--dir", help="Directory containing the videos", required=True
)
parser.add_argument("-o", "--outfile", default="./index.html", help="Output HTML file")
parser.add_argument("-e", "--extension", default="mp4", help="Video file extension")
args = parser.parse_args()

pattern = os.path.join(args.dir, f"*.{args.extension}")
files = glob.glob(pattern)

videos = []
for i, video in enumerate(sorted(files)):  # Sort by number
    filename = os.path.split(video)[-1]
    name = (
        # Extract the name that is between the number and the file extension
        re.compile(r"\d*-(.*)\.\w*")
        .match(filename)
        .groups()[0]
    )
    if not name:
        print(f"Error parsing out the name of '{video}'")
        quit(1)
    else:
        videos.append({"id": i + 1, "title": name, "filepath": video})
        print(f"Adding {name}")

player_template = Template(player_template_raw)

with open(args.outfile, "w") as outfile:
    player_rendered = player_template.render(videos=videos, course_title=args.title)
    outfile.write(player_rendered)
